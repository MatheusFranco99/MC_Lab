% exercicio 1 - ver o arquivo bissecex1.m e expected_iterations.m
[x,err,it] = bissecex1(@(x) cos(x) - x^2,0,2,1e-10)

x =

   0.824132312263828


err =

     5.820766091346741e-11


it =

    35

expected_iterations(0,2,1e-10)

ans =

    35

[x,err,it] = bissecex1(@(x)x^2-2,0,2,1e-11)

x =

   1.414213562376972


err =

     7.275957614183426e-12


it =

    38

expected_iterations(0,2,1e-11)

ans =

    38

[x,err,it] = bissecex1(@(x)x^3-3,0,2,1e-12)

x =

   1.442249570306558


err =

     9.094947017729282e-13


it =

    41

expected_iterations(0,2,1e-12)

ans =

    41

% o numero de iteracoes obtidas usando o codigo da funcao bissecex1 esta de acordo
% com a funcao expected_iterations

% exercicio 2 - ver o arquivo ex2.m
M = [-1 -1 0; -1 3 1; 0 1 7];
[valor_proprio, err] = ex2(M,-2,0,0.5e-9)

valor_proprio =

  -1.242640686687082


err =

     4.656612873077393e-10

[valor_proprio, err] = ex2(M,1,4,0.5e-9)

valor_proprio =

   2.999999999883585


err =

     3.492459654808044e-10

[valor_proprio, err] = ex2(M,6,8,0.5e-9)

valor_proprio =

   7.242640686687082


err =

     4.656612873077393e-10

eig(M)

ans =

  -1.242640687119285
   3.000000000000001
   7.242640687119286


% observamos que os valores proprios calculados pela funcao ex2 estao em concordancia com os
% valores calculados pela funcao eig considerando 10 algarismos significativos.
% utilizamos uma tolerancia de 0,5 * 10^-9 tendo em conta que o modulo dos valores proprios
% da matriz estao entre 0 e 9, garantindo que os valores tem 10 algarismos significativos

% exercicio 3 - ver o arquivo ex3.m

% exercicio 4
[x,err,it] = ex3(@(x) cos(x) - x^2,0,2,1e-10)

x =

   0.824132312281117


err =

     3.712741225569971e-11


it =

    25

[x,err,it] = ex3(@(x)x^2-2,0,2,1e-11)

x =

   1.414213562371500


err =

     7.700728943405011e-12


it =

    16

[x,err,it] = ex3(@(x)x^3-3,0,2,1e-12)

x =

   1.442249570307021


err =

     8.875122858853501e-13


it =

    25

% comparando o numero de iteracoes obtido utilizando os dois metodos para as tres funcoes que escolhemos,
% o metodo da falsa posicao parece ser mais eficiente.

% A titulo de curiosidade, decidimos aplicar os dois metodos aos polinomios
% p(x) = x^(i) - (i), para i = 2,3,4,5,6
% e percebemos que nem sempre o metodo da falsa posicao é mais eficiente
% que o da bisseccao porque pelos graficos (iteracoes_ex1_ex3, erros_relativos_ex1_ex3)
% obtidos (pelo script ex4.m) por vezes o erro relativo da bisseccao
% é inferior ao da falsa posicao,
% o mesmo acontece para o numero de iteracoes.

